using BenchmarkDotNet.Attributes;
using F0.CodeAnalysis.CSharp.Benchmarking;

namespace Architect.Build.SourceGenerator.Benchmarks
{
	public class BindableGeneratorBenchmarks
	{
		private readonly CSharpIncrementalGeneratorBenchmark<BindableGenerator> benchmark = new();

		[GlobalSetup]
		public void Setup()
		{
			string code = @"
using Roslyn.Generated;

namespace Benchmarks
{
	internal static partial class Greeter
	{
		[HelloWorld]
		public static partial string GetHelloWorld();
	}
}
";

			benchmark.Initialize(new CSharpIncrementalGeneratorBenchmarkInitializationContext
			{
				Source = code,
			});
		}

		[Benchmark]
		public object Generate()
		{
			return benchmark.Invoke();
		}

		[GlobalCleanup]
		public void Cleanup()
		{
			string attribute = @"// <auto-generated/>
#nullable enable

namespace Roslyn.Generated
{
	[global::System.AttributeUsage(global::System.AttributeTargets.Method, AllowMultiple = false)]
	internal sealed class HelloWorldAttribute : global::System.Attribute
	{
	}
}
";

		string generated = @"// <auto-generated/>
#nullable enable

namespace Benchmarks
{
	partial class Greeter
	{
		public static partial string GetHelloWorld() => ""Hello, World!"";
	}
}
";

			benchmark.Inspect(new CSharpIncrementalGeneratorBenchmarkInspectionContext
			{
				Source = ("HelloWorldAttribute.g.cs", attribute),
				AdditionalSources = { ("Greeter.HelloWorld.g.cs", generated) },
			});
		}
	}
}
